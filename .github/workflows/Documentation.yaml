name: Documentation

on:
  push:
    branches:
      - main
    tags: '*'
  pull_request:
  workflow_dispatch:
concurrency:
  # Skip intermediate builds: always.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true # allways cancle old runs on new push
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      actions: write # needed to allow julia-actions/cache to proactively delete old caches that it has created
      contents: write
      statuses: write
    steps:
      - name: Install xvfb
        run: |
          sudo apt update
          sudo apt install -y xvfb mesa-utils mesa-vulkan-drivers dbus x11-xserver-utils
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: 1
      - uses: julia-actions/cache@v2
      - name: Configure doc environment
        shell: julia --project=docs --color=yes {0}
        run: |
          using Pkg
          Pkg.develop(PackageSpec(path=pwd()))
          Pkg.instantiate()
      - uses: julia-actions/julia-buildpkg@v1
      # - uses: julia-actions/julia-docdeploy@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
      #     LIBGL_ALWAYS_SOFTWARE: "1"
      #     MESA_GL_VERSION_OVERRIDE: "4.5"
      #     MESA_GLSL_VERSION_OVERRIDE: "450"
      #   with:
      #     prefix: xvfb-run
      - name: Build docs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
          LIBGL_ALWAYS_SOFTWARE: "1"
          MESA_GL_VERSION_OVERRIDE: "4.5"
          MESA_GLSL_VERSION_OVERRIDE: "450"
        shell: xvfb-run -a julia --project=docs --color=yes {0}
        run: |
          using NetworkDynamics
          include(pkgdir(NetworkDynamics)*"/docs/make.jl")
      - name: Run doctests
        shell: julia --project=docs --color=yes {0}
        run: |
          using Documenter: DocMeta, doctest
          using NetworkDynamics
          DocMeta.setdocmeta!(NetworkDynamics, :DocTestSetup, :(using NetworkDynamics); recursive=true)
          doctest(NetworkDynamics)
